// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "github.com/JanitSri/equity-pulse/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// StockDataProvider is an autogenerated mock type for the StockDataProvider type
type StockDataProvider struct {
	mock.Mock
}

// RetrieveArticle provides a mock function with given fields: id
func (_m *StockDataProvider) RetrieveArticle(id string) (*model.ArticleBuilder, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveArticle")
	}

	var r0 *model.ArticleBuilder
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ArticleBuilder, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ArticleBuilder); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ArticleBuilder)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCompanyProfile provides a mock function with given fields: ticker
func (_m *StockDataProvider) RetrieveCompanyProfile(ticker string) (*model.CompanyProfileBuilder, error) {
	ret := _m.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveCompanyProfile")
	}

	var r0 *model.CompanyProfileBuilder
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.CompanyProfileBuilder, error)); ok {
		return rf(ticker)
	}
	if rf, ok := ret.Get(0).(func(string) *model.CompanyProfileBuilder); ok {
		r0 = rf(ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CompanyProfileBuilder)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStockNews provides a mock function with given fields: ticker
func (_m *StockDataProvider) RetrieveStockNews(ticker string) (model.ArticleIds, error) {
	ret := _m.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveStockNews")
	}

	var r0 model.ArticleIds
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.ArticleIds, error)); ok {
		return rf(ticker)
	}
	if rf, ok := ret.Get(0).(func(string) model.ArticleIds); ok {
		r0 = rf(ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ArticleIds)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStockPrices provides a mock function with given fields: ticker, start, end, interval
func (_m *StockDataProvider) RetrieveStockPrices(ticker string, start time.Time, end time.Time, interval model.Interval) (*[]*model.SecurityPrice, error) {
	ret := _m.Called(ticker, start, end, interval)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveStockPrices")
	}

	var r0 *[]*model.SecurityPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time, model.Interval) (*[]*model.SecurityPrice, error)); ok {
		return rf(ticker, start, end, interval)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time, model.Interval) *[]*model.SecurityPrice); ok {
		r0 = rf(ticker, start, end, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]*model.SecurityPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time, model.Interval) error); ok {
		r1 = rf(ticker, start, end, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStockStatistics provides a mock function with given fields: ticker
func (_m *StockDataProvider) RetrieveStockStatistics(ticker string) (*model.StockStatisticsBuilder, error) {
	ret := _m.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveStockStatistics")
	}

	var r0 *model.StockStatisticsBuilder
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.StockStatisticsBuilder, error)); ok {
		return rf(ticker)
	}
	if rf, ok := ret.Get(0).(func(string) *model.StockStatisticsBuilder); ok {
		r0 = rf(ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.StockStatisticsBuilder)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStockTickerInfo provides a mock function with given fields: ticker
func (_m *StockDataProvider) RetrieveStockTickerInfo(ticker string) (*model.TickerInfoBuilder, error) {
	ret := _m.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveStockTickerInfo")
	}

	var r0 *model.TickerInfoBuilder
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.TickerInfoBuilder, error)); ok {
		return rf(ticker)
	}
	if rf, ok := ret.Get(0).(func(string) *model.TickerInfoBuilder); ok {
		r0 = rf(ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TickerInfoBuilder)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStockDataProvider creates a new instance of StockDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStockDataProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *StockDataProvider {
	mock := &StockDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
